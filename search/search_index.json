{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#executive-summary","title":"Executive Summary","text":"<p>As of the current moment TAXII and MISP cannot communicate without the utilization of a third party tool, however most existing tools on the market have either been abandoned or have not been updated to TAXII 2.1. Therefore, the need for a new tool to facilitate this communication exists. The documentation laid forth, aims to achieve this communication by querying the MISP and then receiving its response via endpoints, these endpoints then utilise this response in a myriad of ways, the two key utilisations however would be the collections and objects endpoints. The collections endpoint, creates TAXII collections out of MISP tags, allowing for better organisation of STIX objects. The object's endpoint receives MISP events and converts them to STIX objects, this can happen for just one desired event or all events under a specific tag. </p> <p>Github repository link: https://github.com/dylancolwill/misp-taxii</p>"},{"location":"#context-diagram","title":"Context Diagram","text":""},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#authentication","title":"Authentication","text":"<p>The tool handles authentication with MISP by sending the auth key in the header of the request. Therefore, when querying the MISP make sure in <code>creds.py</code> file that the auth variable is set to your auth key, otherwise your request will be denied by the MISP. Ensure your MISP api key is included where required in setup instructions.</p> <p></p>"},{"location":"conversion/","title":"Conversion","text":""},{"location":"conversion/#conversion","title":"Conversion","text":""},{"location":"conversion/#uuid","title":"UUID","text":"<p>The Tag ID of MISP Event Tags, is put through the str_to_uuid() function, which then generates a UUID for the Event Tag. After which a TAXII Collection is made using the Tag UUID.</p>"},{"location":"conversion/#misp-stix","title":"MISP-STIX","text":"<p>The function misp_to_stix() is called to convert the retrieved MISP data after it has been converted into JSON. </p>"},{"location":"conversion/#mapping","title":"Mapping","text":"MISP Datastructure STIX Object Event Report or Grouping Attribute Indicator, Observable, Vulnerability,Campaign, Custom Object Object Indicator, Observable  Vulnerability, Threat Actor, Course of Action, Custom Object Galaxy Vulnerability, Threat Actor, Course of Action <p>The conversion table was acquired from the library's official repository, further detailed mapping for attributes can be acquired from the repository [1]. However, it will not be listed here due to size and possibility of library updates.</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#references","title":"References","text":"<p>[1] MISP, \u201cmisp-stix/documentation at main \u00b7 MISP/misp-stix,\u201d GitHub, 2021. https://github.com/MISP/misp-stix/tree/main/documentation#Events-to-STIX-21-mapping (accessed Oct. 20, 2025).</p> <p>\u200c[2] Github Repository: https://github.com/dylancolwill/misp-taxii</p>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#initial-setup","title":"Initial Setup","text":"<p>Download the latest repository and create a virtual environment</p> <pre><code>git clone https://github.com/dylancolwill/misp-taxii.git\ncd misp-taxii\npython -m venv venv\n.\\venv\\Scripts\\activate (Windows)\nsource ./venv/bin/activate (Linux/macOS)\n</code></pre> <p>To install all the necessary libraries for this project</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>By default, the server runs on localhost at port 8000. This can be configured inside main.py, see the FasiAPI server deployment docs, or additionally, running behind a proxy. By default, error, warning, info and debug logs are returned to the console through Python's logging facility. Levels can be configured in misp.py, alternatively logging can be disabled by setting the level to CRITICAL. level=logging.CRITICAL</p> <p>TAXII API roots must be configured before starting the server, this can be set in <code>endpoints/root.py</code>.</p> <p>To start the server, run <code>main.py</code></p> <pre><code>python main.py\n</code></pre> <p>Begin by sending a request to the discovery endpoint with required headers</p> <pre><code>curl -X GET \"http://127.0.0.1:8000/taxii2/\" \\\n  -H \"Authorization: &lt;YOUR_API_KEY&gt;\" \\\n  -H \"Accept: application/taxii+json;version=2.1\" \\\n  -H \"Content-Type: application/taxii+json;version=2.1\"\n</code></pre> <p>or check <code>tests/discovery_test.py</code> for Python example. To run tests, MISP auth key is required to be set in <code>creds.py</code>.</p> <p>Additionally, open <code>demo/index.html</code> for a visual interaction, set MISP auth key in <code>demo/script.js</code> and update endpoints accordingly, not required but is easier for testing.</p>"},{"location":"setup/#misp-query","title":"MISP Query","text":"<p>The MISP queries themselves are handled within a file called misp.py, located in the functions folder. When setting up the extension with your own MISP, your MISP IP must be included in an API root.</p> <p>If when querying the MISP, via a TAXII endpoint and you receive the 500 error message code. This often means the server is off.</p>"},{"location":"endpoints/add_objects/","title":"Add Objects","text":""},{"location":"endpoints/add_objects/#add_objects","title":"add_objects","text":"<p>File Location: endpoints/objects.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/</p> <p>The goal of this endpoint is to add a STIX object to a specific TAXII collection. </p> <p>Description Allows clients to publish new STIX objects into a TAXII Collection. All submitted objects must be wrapped in a TAXII envelope. The server validates authentication, permissions, and payload format before processing. If the collection\u2019s can_write property is set to false for the client, the request is rejected.</p> <p>If accepted, the endpoint returns a status resource describing whether the submitted objects were successfully processed, are still pending, or failed. Duplicate objects are not permitted. </p> <p>Example Request POST http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> <p>{objects:[object]}</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. Raises Code Description 400 The server did not understand the request. Invalid JSON or TAXII envelope. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to write to this collection resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. 413 The payload exceeds the maximum allowed size. 415 The Content-Type is unsupported. 422 The object type, version, or format cannot be processed. Returns Code Body Description 202 {status_resource} Request has been accepted. Returns a status resource describing the result. Logic Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Parse the TAXII envelope and validate the structure of the contained STIX objects. Push to the collection, if duplicate will deny. Apply any client filters not included in MISP to that list, including finding the specific object via UUID. Generate a status resource with successful, pending, and failed submissions. Return response and set TAXII response headers."},{"location":"endpoints/get_api_root/","title":"Get API Root","text":""},{"location":"endpoints/get_api_root/#get_api_root","title":"get_api_root","text":"<p>File Location: endpoints/root.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions/</p> <p>The goal of this endpoint is to provide metadata about the TAXII server, including available API Roots. This allows clients to discover what data and services the server exposes.</p> <p>Description This endpoint returns general information about the TAXII server, including its title, description, and the API Roots. Clients can use this as the entry point to explore the server\u2019s available data.</p> <p>The API roots are dynamically generated from the server configuration. Access is permission based, clients will only see API Roots if they have access.</p> <p>MISP does not have native support for roots equivalent, instead associated with different MISP servers. The MISP IP is defined through API roots and is used in each request. </p> <p>Example Request GET http://127.0.0.1:8000/taxii2/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. Raises Code Description 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this API root. 404 The requested API root does not exist. 406 Unsupported media type in Accept header. Returns Code Body Description 200 {title: str, description: str, versions: str, max_content_length: int} Returns a TAXII discovery object containing metadata about the server and its advertised API Roots. Logic Authenticate the client using request headers. Check whether the specified API root exists in the static dictionary. Return the root information with response headers."},{"location":"endpoints/get_discovery/","title":"Get Discovery","text":""},{"location":"endpoints/get_discovery/#get_discovery","title":"get_discovery","text":"<p>File Location: endpoints/discovery.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions</p> <p>The goal of this endpoint is to provide metadata about the TAXII server, including available API Roots. This allows clients to discover what data and services the server exposes.</p> <p>Description This endpoint returns general information about the TAXII server, including its title, description, and the API Roots. Clients can use this as the entry point to explore the server\u2019s available data.</p> <p>The API Roots are dynamically generated from the server configuration. Access is permission based, clients will only see API Roots if they have access.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters api_root str The identifier of the TAXII API root. Raises Code Description 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this discovery resource. 406 Unsupported media type in Accept header. Returns Code Body Description 200 {title: str, description: str, api_roots: [str]} Returns a TAXII discovery object containing metadata about the server and its advertised API Roots. Logic Authenticate the client using request headers. Gather static discovery metadata and dynamically generate the list API roots from server configuration. Return the discovery information with response headers."},{"location":"endpoints/get_manifests/","title":"Get manifests","text":""},{"location":"endpoints/get_manifests/#get_misp_manifests","title":"get_misp_manifests","text":"<p>File Location: endpoints/manifests.py</p> <p>Endpoint: GET /taxii2/{api_root}/collections/{collection_uuid}/manifests</p> <p>The goal of this endpoint is to return information about a specific TAXII API Root.</p> <p>Description This endpoint provides general information about a specific TAXII API Root. Each API Root includes a title, description, supported TAXII versions, and the maximum content length allowed.</p> <p>Clients use this endpoint to determine which API Roots are available and to understand their configurations before requesting collections or objects.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., \u000b?added_after=2017-10-21T11:34:57+00:00 limit int, optional Defines the number of objects to return, must be positive e.g., \u000b?limit=2 next str, optional Pagination token used to retrieve subsequent results. e.g., \u000b?next=2 id str, optional Filter by a specific STIX object ID. e.g., \u000b?match[id]=report--59e9ec59-a888-48e4-afb4-441602de0b81 type str, optional Filter by STIX object type e.g., \u000b?match[id]=report version str, optional Version of the object. e.g., \u000b?match[version]=2017-10-21T11:34:57+00:00 Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, \u2018or added_after parameter was not an ISO date string 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this manifest resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {objects:[objects]} Returns a TAXII envelope containing metadata for the requested STIX objects. Logic Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Query MISP for events that have that tag and apply built in MISP filters.  Convert the returned MISP events into STIX objects. Apply any client filters not included in MISP to that list, including finding the specific object via UUID. Built manifests entries for each object. Slice the filtered list according to limit and next to produce the current page. Build the envelope response and set TAXII response headers."},{"location":"endpoints/get_misp_collection/","title":"Get MISP Collection","text":""},{"location":"endpoints/get_misp_collection/#get_misp_collection","title":"get_misp_collection","text":"<p>File Location: endpoints/collections.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/</p> <p>The goal of this endpoint is to retrieve information about a specific TAXII collection.</p> <p>Each MISP tag is treated as a TAXII collection object.</p> <p>Description This endpoint provides general information about a single TAXII Collection. Used by clients to understand the collection\u2019s name, description, and user access permissions before requesting or pushing data.</p> <p>The endpoint queries MISP for all tags, matches the provided collection_uuid against each converted tag ID, and returns the matching tag.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Raises Code Description 400 The server did not understand the request or parameters. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this collections resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {id, title, description, can_read, can_write, media_types} Returns metadata describing the specified collection. Logic Get all MISP tags. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Build response using metadata sourced from match.  Return the envelope response and set TAXII response headers."},{"location":"endpoints/get_misp_collections/","title":"Get MISP Collections","text":""},{"location":"endpoints/get_misp_collections/#get_misp_collections","title":"get_misp_collections","text":"<p>File Location: endpoints/collections.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/</p> <p>The goal of this endpoint is to retrieve all TAXII collections.</p> <p>Each MISP tag is treated as a TAXII collection object.</p> <p>Description Retrieves all MISP tags accessible to the authenticated user and converts each into a TAXII collection.</p> <p>Each collection includes an ID (UUID of the MISP tag ID), title, description, and access permissions.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/collections/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. Raises Code Description 400 The server did not understand the request or parameters. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this collections resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {collections:[collections]} Returns a TAXII envelope containing a list of collections. Logic Get all MISP tags. Build response using metadata sourced from list.  Return the envelope response and set TAXII response headers."},{"location":"endpoints/get_object/","title":"Get Object","text":""},{"location":"endpoints/get_object/#get_object","title":"get_object","text":"<p>File Location: endpoints/objects.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/</p> <p>The goal of this endpoint is to retrieve a specific object.</p> <p>Description This endpoint fetches a single STIX object by its UUID from a specified TAXII collection. Internally, it maps the TAXII collection UUID to a MISP tag, retrieves related MISP events, converts them into STIX objects, and filters to return the object matching the supplied object_uuid. Optional query parameters allow further filterin.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/ objects/report--59e9ec59-a888-48e4-afb4-441602de0b81</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. object_uuid str UUD of desired TAXII object. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., ?added_after=2017-10-21T11:34:57+00:00 limit int, optional Defines the number of objects to return, must be positive e.g., ?limit=2 next str, optional Pagination token used to retrieve subsequent results. e.g., ?next=2 version str, optional Version of the object. e.g., ?match[version]=2017-10-21T11:34:57+00:00 spec_version str, optional Filter by STIX specification version. e.g., ?match[spec_version]=2.1 Raises Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, \u2018or added_after parameter was not an ISO date string 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. MISP denying access. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {objects:[object]} Returns a TAXII envelope containing the requested STIX object. Logic Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Query MISP for events that have that tag and apply built in MISP filters.  Convert the returned MISP events into STIX objects and flatten them into a single list. Apply any client filters not included in MISP to that list, including finding the specific object via UUID. Slice the filtered list according to limit and next to produce the current page. Build the envelope response and set TAXII response headers."},{"location":"endpoints/get_object_versions/","title":"Get Object Versions","text":""},{"location":"endpoints/get_object_versions/#get_object_versions","title":"get_object_versions","text":"<p>File Location: endpoints/objects.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions/</p> <p>The goal of this endpoint is to fetch the various versions of an object.</p> <p>Description This endpoint fetches all versions of a single STIX object, identified by its object_uuid, from a specified TAXII Collection. Internally, it maps the TAXII collection_uuid to a corresponding MISP tag, retrieves all related MISP events, converts them into STIX objects, and filters to include only objects matching the supplied object_uuid.</p> <p>The endpoint supports optional filtering by creation date (added_after) and specification version (spec_version). Pagination is supported via limit and next to allow clients to page through version lists. The response includes all relevant timestamps of the object\u2019s versions.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/ objects/report--59e9ec59-a888-48e4-afb4-441602de0b81/versions</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. object_uuid str UUD of desired TAXII object. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., \u000b?added_after=2017-10-21T11:34:57+00:00 limit int, optional Defines the number of objects to return, must be positive e.g., \u000b?limit=2 next str, optional Pagination token used to retrieve subsequent results. e.g., \u000b?next=2 spec_version str, optional Filter by STIX specification version. e.g., \u000b?match[spec_version]=2.1 Raises Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, \u2018or added_after parameter was not an ISO date string 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {versions:[versions]} Returns a TAXII envelope containing versions of the requested STIX objects. Logic Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Query MISP for events that have that tag and apply built in MISP filters.  Convert the returned MISP events into STIX objects. Apply any client filters not included in MISP to that list, including finding the specific object via UUID. Extract the timestamps of all versions (modified or created) and sort them. Slice the filtered list according to limit and next to produce the current page. Build the envelope response and set TAXII response headers."},{"location":"endpoints/get_objects/","title":"Get Objects","text":""},{"location":"endpoints/get_objects/#get_objects","title":"get_objects","text":"<p>File Location: endpoints/objects.py</p> <p>Endpoint:  GET /taxii2/{api_root}/collections/{collection_uuid}/objects/</p> <p>The goal of this endpoint is to retrieve multiple STIX objects from a specific TAXII collection.</p> <p>Description This endpoint retrieves all STIX objects available in a given TAXII collection. Internally, it maps the TAXII collection UUID to the corresponding MISP tag, fetches all related MISP events, converts them into STIX objects, and aggregates the results into a TAXII envelope. The endpoint supports filtering, allowing clients to search for objects by type, ID, version, or creation time. Pagination is also supported using the limit and next parameters for large result sets.</p> <p>Example Request GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90 /objects/</p> <p>Authorization: \\&lt;misp-api-key&gt; Accept: application/taxii+json;version=2.1 Content-Type: application/taxii+json;version=2.1</p> Parameters Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., \u000b?added_after=2017-10-21T11:34:57+00:00 limit int, optional Defines the number of objects to return, must be positive e.g., \u000b?limit=2 next str, optional Pagination token used to retrieve subsequent results. e.g., \u000b?next=2 id str, optional Filter by a specific STIX object ID. e.g., \u000b?match[id]=report--59e9ec59-a888-48e4-afb4-441602de0b81 type str, optional Filter by STIX object type e.g., \u000b?match[id]=report version str, optional Version of the object. e.g., \u000b?match[version]=2017-10-21T11:34:57+00:00 spec_version str, optional Filter by STIX specification version. e.g., \u000b?match[spec_version]=2.1 Raises Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, \u2018or added_after parameter was not an ISO date string 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. Returns Code Body Description 200 {objects:[objects]} Returns a TAXII envelope containing the requested STIX objects. Logic Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag. Query MISP for events that have that tag and apply built in MISP filters.  Convert the returned MISP events into STIX objects and flatten them into a single list. Apply any client filters not included in MISP to that list, including finding the specific object via UUID. Slice the filtered list according to limit and next to produce the current page. Build the envelope response and set TAXII response headers."}]}