{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>As of the current moment TAXII and MISP cannot communicate without the utilisation of a third party tool, however most existing tools on the market have either been abandoned or have not been updated to TAXII 2.1. Therefore, the need for a new tool to facilitate this communication is present. The documentation laid forth, aims to achieve this communication by querying the MISP server and then receiving its response via endpoints. These endpoints then utilise this response in a myriad of ways. The two key utilisations however would be the collections and objects endpoints. The collections endpoint, creates TAXII collections out of MISP tags, allowing for better organisation of STIX objects. The object's endpoint receives MISP events and converts them to STIX objects, this can happen for just one desired event or all events under a specific tag. </p> <p>Github repository link: https://github.com/dylancolwill/misp-taxii</p>"},{"location":"#context-diagram","title":"Context Diagram","text":""},{"location":"authentication/","title":"Authentication","text":""},{"location":"authentication/#authentication","title":"Authentication","text":"<p>To remove the need for persistant storage and mapping MISP to TAXII accounts, the MISP auth key is used for authorisation instead. </p> <p>The tool handles authentication using the MISP auth key in each request header, sending a request to the MISP server to verify permissions.</p> <p>When exploring functionality though test files, ensure to include your MISP auth key in <code>creds.py</code>, otherwise your TAXII request will be denied by  MISP. </p> <p>For more information and examples of usage and requests, check the setup instructions.</p>"},{"location":"authentication/#sequence-diagram","title":"Sequence Diagram","text":""},{"location":"conversion/","title":"Conversion","text":""},{"location":"conversion/#conversion","title":"Conversion","text":""},{"location":"conversion/#uuid","title":"UUID","text":"<p>MISP uses tag identification through incremental numerical values and string names. TAXII requires collections to have a version 4 UUID, we have chosen to use tag names as the seed for this conversion. </p> <p>MISP tag names are put through <code>functions/conversion.str_to_uuid()</code>, to generate a UUID, used to identify the corresponding TAXII Collection. Returned in string format.</p> <p>UUID version 4 does not take an input field, this function utlises version 5 for deterministic mapping. Since a database is not used in this project, a seed is required to ensure consistency.</p>"},{"location":"conversion/#misp-stix","title":"MISP-STIX","text":"<p>The function <code>functions/misp.misp_to_stix()</code> is called to convert MISP event data into a STIX 2.1 bundle. Utilising the <code>MISPtoSTIX21Parser</code> function from the <code>misp_stix_converter</code> library to perform the conversion. </p>"},{"location":"conversion/#stix-misp","title":"STIX-MISP","text":"<p>The function <code>functions/conversion.stix_to_misp()</code> is used to convert STIX 2.1 bundles back into MISP event format. Utilising the <code>InternalSTIX2toMISPParser</code> function from the <code>misp_stix_converter</code> library to parse the STIX bundle and reconstruct the corresponding MISP events.</p>"},{"location":"conversion/#mapping","title":"Mapping","text":"MISP Datastructure STIX Object Event Report or Grouping Attribute Indicator, Observable, Vulnerability,Campaign, Custom Object Object Indicator, Observable  Vulnerability, Threat Actor, Course of Action, Custom Object Galaxy Vulnerability, Threat Actor, Course of Action <p>The conversion table was acquired from the library's official repository. However, it will not be listed here due to size and possibility of library updates.</p>"},{"location":"references/","title":"References","text":""},{"location":"references/#references","title":"References","text":"<ol> <li> <p>MISP, \u201cmisp-stix/documentation at main \u00b7 MISP/misp-stix,\u201d GitHub, 2021. https://github.com/MISP/misp-stix/tree/main/documentation#Events-to-STIX-21-mapping.</p> </li> <li> <p>OASIS, \"TAXII\u2122 2.1 Specification,\" OASIS Open, 2021. https://docs.oasis-open.org/cti/taxii/v2.1/os/taxii-v2.1-os.html</p> </li> <li> <p>Github Repository: https://github.com/dylancolwill/misp-taxii</p> </li> </ol>"},{"location":"setup/","title":"Setup","text":""},{"location":"setup/#initial-setup","title":"Initial Setup","text":"<p>Download the latest repository and create a virtual environment</p> <pre><code>git clone https://github.com/dylancolwill/misp-taxii.git\ncd misp-taxii\npython -m venv venv\n.\\venv\\Scripts\\activate (Windows)\nsource ./venv/bin/activate (Linux/macOS)\n</code></pre> <p>To install all the necessary libraries for this project</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>By default, the server runs on localhost at port 8000. This can be configured inside <code>main.py</code>, see the FasiAPI server deployment docs, or additionally, running behind a proxy. By default, error, warning, info and debug logs are returned to the console through Python's logging facility. Levels can be configured in <code>functions/misp.py</code>, alternatively logging can be disabled by setting the level to CRITICAL. <code>level=logging.CRITICAL</code></p> <p>TAXII API roots must be configured before starting the server, this can be set in <code>endpoints/root.py</code>.</p> <p>To start the server, run <code>main.py</code></p> <pre><code>python main.py\n</code></pre> <p>Begin by sending a request to the discovery endpoint with required headers</p> <pre><code>curl -X GET \"http://127.0.0.1:8000/taxii2/\" \\\n  -H \"Authorization: &lt;YOUR_API_KEY&gt;\" \\\n  -H \"Accept: application/taxii+json;version=2.1\" \\\n  -H \"Content-Type: application/taxii+json;version=2.1\"\n</code></pre> <p>or check/run <code>tests/discovery_test.py</code> for Python example. Ensure to configure enpoints accordingly in test files. To run tests, MISP auth key is required to be set in <code>creds.py</code>.</p> <pre><code>python -m tests.discovery_test\n</code></pre> <p>Additionally, open <code>demo/index.html</code> for a visual interaction, set MISP auth key in <code>demo/script.js</code> and update endpoints accordingly, not required but is easier for testing.</p>"},{"location":"setup/#misp-query","title":"MISP Query","text":"<p>The MISP queries themselves are handled within <code>feature/misp.py</code>. When setting up the extension with your own MISP, your MISP IP must be included in an API root.</p> <p>If when querying a TAXII endpoint, you receive the 500 error message code. This often means the FastAPI server has not been deployed. </p>"},{"location":"endpoints/add_objects/","title":"Add Objects","text":""},{"location":"endpoints/add_objects/#add_objects","title":"add_objects","text":"<p>File Location: <code>endpoints/objects.py</code> Endpoint: <code>POST /taxii2/{api_root}/collections/{collection_uuid}/objects/</code></p> <p>The goal of this endpoint is to add a STIX object to a specific TAXII collection.</p> <p>Description Allows clients to publish new STIX objects into a TAXII Collection. All submitted objects must be wrapped in a TAXII envelope. The server validates authentication, permissions, and payload format before processing. If the collection\u2019s <code>can_write</code> property is set to false for the client, the request is rejected.</p> <p>If accepted, the endpoint returns a status resource describing whether the submitted objects were successfully processed, are still pending, or failed. Duplicate objects are not permitted.</p> <p>Example Request </p> <pre><code>POST http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/add_objects/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL."},{"location":"endpoints/add_objects/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request. Invalid JSON or TAXII envelope. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to write to this collection resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header. 413 The payload exceeds the maximum allowed size. 415 The Content-Type is unsupported. 422 The object type, version, or format cannot be processed."},{"location":"endpoints/add_objects/#returns","title":"Returns","text":"Code Body Description 202 {status_resource} Request has been accepted. Returns a status resource describing the result."},{"location":"endpoints/add_objects/#logic","title":"Logic","text":"Step 1. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag.2. Parse the TAXII envelope and validate the structure of the contained STIX objects.3. Push to the collection, if duplicate will deny.4. Apply any client filters not included in MISP to that list, including finding the specific object via UUID.5. Generate a status resource with successful, pending, and failed submissions.6. Return response and set TAXII response"},{"location":"endpoints/get_api_root/","title":"Get API Root","text":""},{"location":"endpoints/get_api_root/#get_api_root","title":"get_api_root","text":"<p>File Location: <code>endpoints/root.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions/</code></p> <p>The goal of this endpoint is to provide metadata about the TAXII server, including available API Roots. This allows clients to discover what data and services the server exposes.</p> <p>Description This endpoint returns general information about the TAXII server, including its title, description, and the API Roots. Clients can use this as the entry point to explore the server\u2019s available data.</p> <p>The API roots are dynamically generated from the server configuration. Access is permission based, clients will only see API Roots if they have access.</p> <p>MISP does not have native support for roots equivalent, instead associated with different MISP servers. The MISP IP is defined through API roots and is used in each request.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_api_root/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root."},{"location":"endpoints/get_api_root/#raises","title":"Raises","text":"Code Description 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this API root. 404 The requested API root does not exist. 406 Unsupported media type in Accept header."},{"location":"endpoints/get_api_root/#returns","title":"Returns","text":"Code Body Description 200 {title: str, description: str, versions: str, max_content_length: int} Returns a TAXII discovery object containing metadata about the server and its advertised API Roots."},{"location":"endpoints/get_api_root/#logic","title":"Logic","text":"Step Authenticate the client using request headers. Check whether the specified API root exists in the static dictionary. Return the root information with"},{"location":"endpoints/get_discovery/","title":"Get Discovery","text":""},{"location":"endpoints/get_discovery/#get_discovery","title":"get_discovery","text":"<p>File Location: <code>endpoints/discovery.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions</code></p> <p>The goal of this endpoint is to provide metadata about the TAXII server, including available API Roots. This allows clients to discover what data and services the server exposes.</p> <p>Description This endpoint returns general information about the TAXII server, including its title, description, and the API Roots. Clients can use this as the entry point to explore the server\u2019s available data.</p> <p>The API Roots are dynamically generated from the server configuration. Access is permission based, clients will only see API Roots if they have access.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_discovery/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root."},{"location":"endpoints/get_discovery/#raises","title":"Raises","text":"Code Description 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this discovery resource. 406 Unsupported media type in Accept header."},{"location":"endpoints/get_discovery/#returns","title":"Returns","text":"Code Body Description 200 {title: str, description: str, api_roots: [str]} Returns a TAXII discovery object containing metadata about the server and its advertised API Roots."},{"location":"endpoints/get_discovery/#logic","title":"Logic","text":"Step 1. Authenticate the client using request headers.2. Gather static discovery metadata and dynamically generate the list of API roots from server configuration.3. Return the discovery information with response"},{"location":"endpoints/get_manifests/","title":"Get MISP Manifests","text":""},{"location":"endpoints/get_manifests/#get_manifests","title":"get_manifests","text":"<p>File Location: <code>endpoints/manifests.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/manifests</code></p> <p>The goal of this endpoint is to return manifest entries for objects in a TAXII collection.</p> <p>Description This endpoint returns manifest entries for all STIX objects in a given TAXII collection. Clients can use this to discover available objects, their versions, and their metadata before requesting the full objects.</p> <p>Supports filtering by object ID, type, version, and pagination via <code>limit</code> and <code>next</code>.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/manifests\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_manifests/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., <code>?added_after=2017-10-21T11:34:57+00:00</code> limit int, optional Defines the number of objects to return, must be positive e.g., <code>?limit=2</code> next str, optional Pagination token used to retrieve subsequent results. e.g., <code>?next=2</code> id str, optional Filter by a specific STIX object ID. e.g., <code>?match[id]=report--59e9ec59-a888-48e4-afb4-441602de0b81</code> type str, optional Filter by STIX object type e.g., <code>?match[type]=report</code> version str, optional Version of the object. e.g., <code>?match[version]=2017-10-21T11:34:57+00:00</code>"},{"location":"endpoints/get_manifests/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, or added_after parameter was not an ISO date string. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this manifest resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_manifests/#returns","title":"Returns","text":"Code Body Description 200 {objects:[objects]} Returns a TAXII envelope containing manifest entries for the requested STIX objects."},{"location":"endpoints/get_manifests/#logic","title":"Logic","text":"Step 1. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag.2. Query MISP for events that have that tag and apply built-in MISP filters.3. Convert the returned MISP events into STIX objects.4. Apply any client filters not included in MISP to that list, including finding the specific object via UUID, type, or version.5. Build manifest entries for each object.6. Slice the filtered list according to limit and next to produce the current page.7. Build the envelope response and set TAXII response"},{"location":"endpoints/get_misp_collection/","title":"Get MISP Collection","text":""},{"location":"endpoints/get_misp_collection/#get_misp_collection","title":"get_misp_collection","text":"<p>File Location: <code>endpoints/collections.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/</code></p> <p>The goal of this endpoint is to retrieve information about a specific TAXII collection.</p> <p>Each MISP tag is treated as a TAXII collection object.</p> <p>Description This endpoint provides general information about a single TAXII Collection. Used by clients to understand the collection\u2019s name, description, and user access permissions before requesting or pushing data.</p> <p>The endpoint queries MISP for all tags, matches the provided collection_uuid against each converted tag ID, and returns the matching tag.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_misp_collection/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id."},{"location":"endpoints/get_misp_collection/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or parameters. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this collections resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_misp_collection/#returns","title":"Returns","text":"Code Body Description 200 {id, title, description, can_read, can_write, media_types} Returns metadata describing the specified collection."},{"location":"endpoints/get_misp_collection/#logic","title":"Logic","text":"Step 1. Get all MISP tags.2. Convert each tag name to uuid and compare with collection_uuid to find MISP tag.3. Build response using metadata sourced from match.4. Return the envelope response and set TAXII"},{"location":"endpoints/get_misp_collections/","title":"Get MISP Collections","text":""},{"location":"endpoints/get_misp_collections/#get_misp_collections","title":"get_misp_collections","text":"<p>File Location: <code>endpoints/collections.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/</code></p> <p>The goal of this endpoint is to retrieve all TAXII collections.</p> <p>Each MISP tag is treated as a TAXII collection object.</p> <p>Description Retrieves all MISP tags accessible to the authenticated user and converts each into a TAXII collection.</p> <p>Each collection includes an ID (UUID of the MISP tag ID), title, description, and access permissions.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_misp_collections/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root."},{"location":"endpoints/get_misp_collections/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or parameters. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this collections resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_misp_collections/#returns","title":"Returns","text":"Code Body Description 200 {collections:[collections]} Returns a TAXII envelope containing a list of collections."},{"location":"endpoints/get_misp_collections/#logic","title":"Logic","text":"Step 1. Get all MISP tags.2. Build response using metadata sourced from list.3. Return the envelope response and set"},{"location":"endpoints/get_object/","title":"Get Object","text":""},{"location":"endpoints/get_object/#get_object","title":"get_object","text":"<p>File Location: <code>endpoints/objects.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/</code></p> <p>The goal of this endpoint is to retrieve a specific object.</p> <p>Description This endpoint fetches a single STIX object by its UUID from a specified TAXII collection. Internally, it maps the TAXII collection UUID to a MISP tag, retrieves related MISP events, converts them into STIX objects, and filters to return the object matching the supplied object_uuid. Optional query parameters allow further filtering.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/objects/report--59e9ec59-a888-48e4-afb4-441602de0b81\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_object/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. object_uuid str UUID of desired TAXII object. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., <code>?added_after=2017-10-21T11:34:57+00:00</code> limit int, optional Defines the number of objects to return, must be positive e.g., <code>?limit=2</code> next str, optional Pagination token used to retrieve subsequent results. e.g., <code>?next=2</code> version str, optional Version of the object. e.g., <code>?match[version]=2017-10-21T11:34:57+00:00</code> spec_version str, optional Filter by STIX specification version. e.g., <code>?match[spec_version]=2.1</code>"},{"location":"endpoints/get_object/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, or added_after parameter was not an ISO date string. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. MISP denying access. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_object/#returns","title":"Returns","text":"Code Body Description 200 {objects:[object]} Returns a TAXII envelope containing the requested STIX object."},{"location":"endpoints/get_object/#logic","title":"Logic","text":"Step 1. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag.2. Query MISP for events that have that tag and apply built-in MISP filters.3. Convert the returned MISP events into STIX objects and flatten them into a single list.4. Apply any client filters not included in MISP to that list, including finding the specific object via UUID.5. Slice the filtered list according to limit and next to produce the current page.6. Build the envelope response and set TAXII"},{"location":"endpoints/get_object_versions/","title":"Get Object Versions","text":""},{"location":"endpoints/get_object_versions/#get_object_versions","title":"get_object_versions","text":"<p>File Location: <code>endpoints/objects.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/objects/{object_uuid}/versions/</code></p> <p>The goal of this endpoint is to fetch the various versions of an object.</p> <p>Description This endpoint fetches all versions of a single STIX object, identified by its object_uuid, from a specified TAXII Collection. Internally, it maps the TAXII collection_uuid to a corresponding MISP tag, retrieves all related MISP events, converts them into STIX objects, and filters to include only objects matching the supplied object_uuid.</p> <p>The endpoint supports optional filtering by creation date (<code>added_after</code>) and specification version (<code>spec_version</code>). Pagination is supported via <code>limit</code> and <code>next</code> to allow clients to page through version lists. The response includes all relevant timestamps of the object\u2019s versions.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/objects/report--59e9ec59-a888-48e4-afb4-441602de0b81/versions\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_object_versions/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. object_uuid str UUID of desired TAXII object. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., <code>?added_after=2017-10-21T11:34:57+00:00</code> limit int, optional Defines the number of objects to return, must be positive e.g., <code>?limit=2</code> next str, optional Pagination token used to retrieve subsequent results. e.g., <code>?next=2</code> spec_version str, optional Filter by STIX specification version. e.g., <code>?match[spec_version]=2.1</code>"},{"location":"endpoints/get_object_versions/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, or added_after parameter was not an ISO date string. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_object_versions/#returns","title":"Returns","text":"Code Body Description 200 {versions:[versions]} Returns a TAXII envelope containing versions of the requested STIX objects."},{"location":"endpoints/get_object_versions/#logic","title":"Logic","text":"Step 1. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag.2. Query MISP for events that have that tag and apply built-in MISP filters.3. Convert the returned MISP events into STIX objects.4. Apply any client filters not included in MISP to that list, including finding the specific object via UUID.5. Extract the timestamps of all versions (modified or created) and sort them.6. Slice the filtered list according to limit and next to produce the current page.7. Build the envelope response and set TAXII response headers."},{"location":"endpoints/get_objects/","title":"Get Objects","text":""},{"location":"endpoints/get_objects/#get_objects","title":"get_objects","text":"<p>File Location: <code>endpoints/objects.py</code></p> <p>Endpoint: <code>GET /taxii2/{api_root}/collections/{collection_uuid}/objects/</code></p> <p>The goal of this endpoint is to retrieve multiple STIX objects from a specific TAXII collection.</p> <p>Description This endpoint retrieves all STIX objects available in a given TAXII collection. Internally, it maps the TAXII collection UUID to the corresponding MISP tag, fetches all related MISP events, converts them into STIX objects, and aggregates the results into a TAXII envelope. The endpoint supports filtering, allowing clients to search for objects by type, ID, version, or creation time. Pagination is also supported using the limit and next parameters for large result sets.</p> <p>Example Request </p> <pre><code>GET http://127.0.0.1:8000/taxii2/api1/collections/28dfa8c5-dff4-52ad-90df-e5112b2ade90/objects/\n\nAuthorization: &lt;misp-api-key&gt;\nAccept: application/taxii+json;version=2.1\nContent-Type: application/taxii+json;version=2.1\n</code></pre>"},{"location":"endpoints/get_objects/#parameters","title":"Parameters","text":"Name Type Use api_root str The identifier of the TAXII API root. collection_uuid str UUID of desired TAXII collection, derived from MISP tag id. Included in API request URL. added_after str, optional Retrieve objects created after a certain date. e.g., <code>?added_after=2017-10-21T11:34:57+00:00</code> limit int, optional Defines the number of objects to return, must be positive e.g., <code>?limit=2</code> next str, optional Pagination token used to retrieve subsequent results. e.g., <code>?next=2</code> id str, optional Filter by a specific STIX object ID. e.g., <code>?match[id]=report--59e9ec59-a888-48e4-afb4-441602de0b81</code> type str, optional Filter by STIX object type e.g., <code>?match[type]=report</code> version str, optional Version of the object. e.g., <code>?match[version]=2017-10-21T11:34:57+00:00</code> spec_version str, optional Filter by STIX specification version. e.g., <code>?match[spec_version]=2.1</code>"},{"location":"endpoints/get_objects/#raises","title":"Raises","text":"Code Description 400 The server did not understand the request or filter parameters. Usually non-positive integer has been used as the 'limit' parameter, or added_after parameter was not an ISO date string. 401 The client needs to authenticate. Incorrect header formatting or missing Authorization field. 403 The client does not have access to this object resource. 404 The API Root or Collection ID are not found 406 Unsupported media type in Accept header."},{"location":"endpoints/get_objects/#returns","title":"Returns","text":"Code Body Description 200 {objects:[objects]} Returns a TAXII envelope containing the requested STIX objects."},{"location":"endpoints/get_objects/#logic","title":"Logic","text":"Step 1. Get all MISP tags, convert each tag name to uuid and compare with collection_uuid to find MISP tag.2. Query MISP for events that have that tag and apply built-in MISP filters.3. Convert the returned MISP events into STIX objects and flatten them into a single list.4. Apply any client filters not included in MISP to that list, including finding the specific object via UUID.5. Slice the filtered list according to limit and next to produce the current page.6. Build the envelope"}]}